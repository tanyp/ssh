<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-4.3.xsd">

    <!-- sessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!-- 一个Hibernate Dialect类名允许Hibernate针对特定的关系数据库生成优化的SQL.取值 full.classname.of.Dialect -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</prop>
                <!-- 在log和console中打出格式后的SQL 取值 true | false-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!-- 输出所有SQL语句到控制台 -->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <!-- 允许Hibernate使用JDBC2的批量更新-->
                <prop key="hibernate.jdbc.batch_size">100</prop>
                <!-- 指定JDBC抓取数量的大小 -->
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <!-- 为单向关联(一对一, 多对一)的外连接抓取（outer join fetch）树设置最大深度. 值为0意味着将关闭默认的外连接抓取-->
                <prop key="hibernate.max_fetch_depth">3</prop>
                <!-- 指定Hibernate在何时释放JDBC连接.
                     默认情况下,直到Session被显式关闭或被断开连接时,才会释放JDBC连接.
                     对于应用程序服务器的JTA数据源, 你应当使用after_statement, 这样在每次JDBC调用后，都会主动的释放连接.
                     对于非JTA的连接, 使用after_transaction在每个事务结束时释放连接是合理的.
                     auto将为JTA和CMT事务策略选择after_statement, 为JDBC事务策略选择after_transaction.-->
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
                <!-- 以频繁的读操作为代价, 优化二级缓存来最小化写操作. 在Hibernate3中，这个设置对的集群缓存非常有用, 对集群缓存的实现而言，默认是开启的.-->
                <prop key="hibernate.cache.use_minimal_puts">true</prop>
                <!-- 能用来完全禁止使用二级缓存. 对那些在类的映射定义中指定<cache>的类，会默认开启二级缓存.取值 true|false-->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <!-- 允许查询缓存, 个别查询仍然需要被设置为可缓存的.取值 true|false-->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <!-- 二级缓存的提供类-->
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.jcache.internal.JCacheRegionFactory
                </prop>
                <prop key="hibernate.javax.cache.provider">org.ehcache.jsr107.EhcacheCachingProvider</prop>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate5.SpringSessionContext
                </prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.javax.cache.missing_cache_strategy">create</prop>
            </props>
        </property>
        <property name="annotatedClasses">
            <ref bean="annotatedClassesList"/>
        </property>
    </bean>

    <util:list id="annotatedClassesList">
        <value>cn.com.yunyoutianxia.simple.domain.entity.Simple</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.FirmBase</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.FirmFlow</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.FirmWechat</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.Firm</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.DivisionBase</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.DivisionFlow</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.DivisionWechat</value>
        <value>cn.com.yunyoutianxia.simple.domain.entity.Division</value>
    </util:list>
</beans>