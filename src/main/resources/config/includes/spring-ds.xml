<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 数据源 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="defaultTransactionIsolation" value="2"/>
        <property name="defaultAutoCommit" value="true"/>
        <property name="targetDataSource">
            <bean class="com.alibaba.druid.pool.DruidDataSource">
                <!-- 数据库驱动 -->
                <property name="driverClassName" value="${jdbc.driver}"/>
                <!-- 数据库地址 -->
                <property name="url" value="${jdbc.url}"/>
                <!-- 数据库用户 -->
                <property name="username" value="${jdbc.username}"/>
                <!-- 数据库密码 -->
                <property name="password" value="${jdbc.password}"/>
                <!-- 连接池可以使用的最大连接数量 -->
                <property name="maxActive" value="1000"/>
                <!-- 连接池使用的最小连接数量 -->
                <property name="minIdle" value="5"/>
                <!-- 获取连接时最大等待时间，单位毫秒。
                     配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
                     如果需要可以通过配置useUnfairLock属性为true使用非公平锁。-->
                <property name="maxWait" value="60000"/>
                <property name="useUnfairLock" value="false"/>
                <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                     监控统计用的filter:stat
                     日志用的filter:log4j
                     防御sql注入的filter:wall-->
                <property name="filters" value="stat"/>
                <!-- 有两个含义：1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
                               2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
                <property name="timeBetweenEvictionRunsMillis" value="60000"/>
                <!-- 连接保持空闲而不被驱逐的最小时间 -->
                <property name="minEvictableIdleTimeMillis" value="300000"/>
                <!-- 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
                     如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。-->
                <property name="validationQuery" value="SELECT 'x'"/>
                <!-- 建议配置为true，不影响性能，并且保证安全性。
                     申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
                <property name="testWhileIdle" value="true"/>
                <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
                <property name="testOnBorrow" value="false"/>
                <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
                <property name="testOnReturn" value="false"/>
            </bean>
        </property>
    </bean>


    <!--<bean id="dataSource"-->
    <!--class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">-->
    <!--<property name="defaultTransactionIsolation" value="2"/>-->
    <!--<property name="defaultAutoCommit" value="true"/>-->
    <!--<property name="targetDataSource">-->
    <!--<bean class="org.logicalcobwebs.proxool.ProxoolDataSource">-->
    <!--&lt;!&ndash; 数据库驱动 &ndash;&gt;-->
    <!--<property name="driver" value="${jdbc.driver}"/>-->
    <!--&lt;!&ndash; 数据库地址 &ndash;&gt;-->
    <!--<property name="driverUrl" value="${jdbc.url}"/>-->
    <!--&lt;!&ndash; 数据库用户 &ndash;&gt;-->
    <!--<property name="user" value="${jdbc.username}"/>-->
    <!--&lt;!&ndash; 数据库密码 &ndash;&gt;-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--&lt;!&ndash; 连接池可以使用的最大连接数量 &ndash;&gt;-->
    <!--<property name="maximumConnectionCount" value="${proxool.maxConnCount}"/>-->
    <!--&lt;!&ndash; 连接池使用的最小连接数量 &ndash;&gt;-->
    <!--<property name="minimumConnectionCount" value="${proxool.minConnCount}"/>-->
    <!--&lt;!&ndash; for debug  &ndash;&gt;-->
    <!--<property name="maximumActiveTime" value="${proxool.maximumActiveTime}"/>-->
    <!--<property name="houseKeepingSleepTime" value="${proxool.houseKeepingSleepTime}"/>-->
    <!--<property name="houseKeepingTestSql" value="${proxool.houseKeepingTestSql}"/>-->
    <!--<property name="statistics" value="${proxool.statistics}"/>-->
    <!--<property name="simultaneousBuildThrottle" value="${proxool.simultaneousBuildThrottle}"/>-->
    <!--<property name="trace" value="${proxool.trace}"/>-->
    <!--</bean>-->
    <!--</property>-->
    <!--</bean>-->
</beans>